
def generate_dungeon_bsp(
    max_rooms: int,
    room_min_dimension: int,
    room_max_dimension: int,
    map_width: int, 
    map_height: int,
    player: Entity
    ) -> GameMap:
    """Generate a new dungeon map using bsp."""
    
    """Recursively splits map down either vertically or horizontally
    until cannot split more as byproduct rooms would be smaller than min room size.
    Then, start placing rooms of random sizes within those leaves.""":


def generate_dungeon(map_width, map_height) -> GameMap:
    dungeon1 = GameMap(map_width, map_height)
    dungeon2 = GameMap(map_width, map_height)

    room_1 = RectangularRoom(x=0, y=0, width=10, height=15)
    room_2 = RectangularRoom(x=0, y=0, width=10, height=15)

    dungeon1.tiles[room_1.inner] = tile_types.floor
    dungeon2.tiles[room_2.inner] = tile_types.floor
    
    offset_x, offset_y = dungeon1.width, dungeon1.height
    room_2.x1 += offset_x
    room_2.x2 += offset_x
    room_2.y1 += offset_y
    room_2.y2 += offset_y
    
    dungeon1.append_right(dungeon2)
    
    for x, y in tunnel_between(room_2.center, room_1.center):
        print(x, y)
        dungeon1.tiles[x, y] = tile_types.floor
    return dungeon1


import math
import random
from turtle import right, width
from typing import List
from room_management import RectangularRoom
from room_management import *
import tile_types
from game_map import GameMap

class Node:
    def __init__(self, x: int, y: int, width: int, height: int):
        self.left = None
        self.right = None
        
        self.x = x
        self.y = y
        self.x2 = x + width
        self.y2 = y + height
        self.width = width
        self.height = height
        self.room = None
        
    def __has_offsprings(self):
        if (self.left is None) or (self.right is None): 
            return False
        else:
            return True
        
    def create_room(self, dungeon: GameMap) -> None:
        #Recursively call function until node with no children found
        if (self.left != None) or (self.right != None):
            if (self.left != None):
                self.left.create_room(dungeon)
            if (self.right != None):
                self.right.create_room(dungeon)
            
            if (self.left != None) and (self.right != None):
                for x, y in tunnel_between((self.left.__get_room().center), (self.right.__get_room().center)):
                    dungeon.tiles[x, y] = tile_types.floor
        
        #Generate a room based on the node size
        else:
            room_width = random.randint(1, self.width - 1)
            room_height = random.randint(1, self.height - 1)
            room_x = random.randint(self.x + 1, self.x2 - room_width)
            room_y = random.randint(self.y + 1, self.y2 - room_height)
            self.room = RectangularRoom(room_x, room_y, room_width, room_height)
            #dungeon.tiles[self.room.inner] = tile_types.floor

        
    def __split(self, room_min_dimension: int) -> bool:
        #Logic: Room size must be > min size =>
        #See which amount * constant dimension is enough for size,
        #then pick that as limit for cutting from both ends
        
        #Randomly choose direction for split
        decision = random.randint(1,2) 
        if decision == 1:
            #Split vertically
            min, max = room_min_dimension, self.width - room_min_dimension
            split_at = random.randint(min, max)
            self.left = Node(self.x, self.y ,split_at, self.height)
            self.right= Node(self.x + split_at, self.y ,self.width - split_at, self.height)
        elif decision == 2:
            #Split horizontally
            min, max = room_min_dimension, self.height - room_min_dimension
            split_at = random.randint(min, max)
            self.left = Node(self.x, self.y, self.width, split_at)
            self.right = Node(self.x, self.y + split_at, self.width, self.height - split_at)
    
    def create_subnode(self, room_min_dimension: int) -> None:
        #If node has dimensions greater than twice the minimum size, split
        #call this function onto the children
        if (self.width > room_min_dimension * 2) and (self.height > room_min_dimension * 2) :
            self.__split(room_min_dimension)
            self.left.create_subnode(room_min_dimension)
            self.right.create_subnode(room_min_dimension)
            
    def __get_room(self):
        if (self.room != None):
            return self.room
        else:
            if (self.left != None):
                left_room = self.left.__get_room()
            
            if (self.right != None):
                right_room = self.right.__get_room()
                
            if (left_room == None) and (right_room == None):
                return None
            elif left_room == None:
                return right_room
            elif right_room == None:
                return left_room
            elif random.randint(1,2) == 1:
                return left_room
            else:
                return right_room
            

    """ def connect_room(self, dungeon: GameMap) -> GameMap:
        if (self.__has_offsprings()):
            #If children are leaves, connect the rooms toghether
            if (not self.left.__has_offsprings()) and (not self.right.__has_offsprings()):
                dungeon.tiles[self.left.room.inner] = tile_types.floor
                dungeon.tiles[self.right.room.inner] = tile_types.floor
                for x, y in tunnel_between((self.left.room.center), (self.right.room.center)):
                    dungeon.tiles[x, y] = tile_types.floor
                    
            #Else, recursively call connect_room on its children    
            else:
                self.left.connect_room(dungeon)
                self.right.connect_room(dungeon)
                
            
        return dungeon """
            
            
    #def _connect_room(self, dungeon: GameMap):